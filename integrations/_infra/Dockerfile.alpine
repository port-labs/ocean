ARG BASE_PYTHON_IMAGE=alpine:3.20.1

FROM ${BASE_PYTHON_IMAGE} AS base

ARG BUILD_CONTEXT
ARG BUILDPLATFORM

ENV LIBRDKAFKA_VERSION=2.8.2 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    POETRY_NO_INTERACTION=1 \
    PIP_NO_CACHE_DIR=on \
    PIP_DEFAULT_TIMEOUT=100 \
    GRPC_PYTHON_DISABLE_LIBC_COMPATIBILITY=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install system dependencies and libraries
RUN \
    apk add --no-cache \
        gcc \
        g++ \
        musl-dev \
        build-base \
        bash \
        oniguruma-dev \
        make \
        autoconf \
        automake \
        libtool \
        curl \
        openssl-dev \
        cargo \
        pkgconfig \
        linux-headers \
        libstdc++ \
        libffi-dev \
        py3-grpcio \
        py3-protobuf \
        python3-dev \
        # librdkafka-dev \
    # Install community librdkafka-dev since the default in alpine is older
    && echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \
    && echo "@edgecommunity http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
    && apk add --no-cache \
        alpine-sdk \
        "librdkafka@edgecommunity>=${LIBRDKAFKA_VERSION}" \
        "librdkafka-dev@edgecommunity>=${LIBRDKAFKA_VERSION}" \
    && curl -sSL https://install.python-poetry.org | python3 - \
    && apk upgrade gcc linux-headers libstdc++ gcc g++ --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main/ \
    && ln -s /root/.local/bin/poetry /usr/bin/poetry \
    && poetry config virtualenvs.in-project true

WORKDIR /app

COPY ./${BUILD_CONTEXT}/pyproject.toml ./${BUILD_CONTEXT}/poetry.lock /app/

COPY ./integrations/_infra/grpcio.sh /app/grpcio.sh

RUN chmod a+x /app/grpcio.sh && /app/grpcio.sh "${BUILDPLATFORM}"

RUN export GRPC_PYTHON_DISABLE_LIBC_COMPATIBILITY=1 \
    && poetry install --without dev --no-root --no-interaction --no-ansi --no-cache

FROM ${BASE_PYTHON_IMAGE} AS prod

ARG INTEGRATION_VERSION
ARG BUILD_CONTEXT

ENV LIBRDKAFKA_VERSION=2.8.2

LABEL INTEGRATION_VERSION=${INTEGRATION_VERSION}
# Used to ensure that new integrations will be public, see https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility
LABEL org.opencontainers.image.source=https://github.com/port-labs/ocean

# Install only runtime dependencies
RUN \
    apk add --no-cache \
        bash \
        oniguruma-dev \
        python3 \
    # Install community librdkafka-dev since the default in alpine is older
    && echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \
    && echo "@edgecommunity http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
    && apk update \
    && apk add --no-cache \
        alpine-sdk \
        "librdkafka@edgecommunity>=${LIBRDKAFKA_VERSION}" \
        "librdkafka-dev@edgecommunity>=${LIBRDKAFKA_VERSION}" \
    # Fix security issues
    && apk upgrade busybox libcrypto3 libssl3 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main/

WORKDIR /app

# Copy the application code
COPY ./${BUILD_CONTEXT} /app

# Copy dependencies from the build stage
COPY --from=base /app/.venv /app/.venv

COPY ./integrations/_infra/init.sh /app/init.sh

# Ensure that ocean is available for all in path
RUN chmod a+x /app/.venv/bin/ocean

RUN chmod a+x /app/init.sh
RUN ln -s /app/.venv/bin/ocean /usr/bin/ocean
# Run the application
CMD ["bash", "/app/init.sh"]
